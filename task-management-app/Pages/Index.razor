

@page "/"
@using Microsoft.JSInterop

<PageTitle>Task Management App</PageTitle>
<head>
    <link href="css/sliderPanel.css" rel="stylesheet" />
</head>
@*//create a new task button*@
<div class="row">
    <div class="col-md-12">
        @*//create a string input field for the task name and bind it to the TaskName property of the TaskModel class *@
        <input type="text" class="form-control" @bind="currentTaskName" />
        @if (validationFlag)
        {
            <p class="text-danger">Please enter a valid task name.</p>
        }
        <button class="btn btn-primary" @onclick="CreateNewTask">Create New Task</button>
    </div>
</div>

@*//display the list of tasks*@
<div class="row">
    <div class="col-md-12">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Task Name</th>
                    <th>Task Description</th>
                    <th>Task Status</th>
                    <th>Task Priority</th>
                    <th>Task Due Date</th>
                    <th>Task Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in tasks)
                {
                    <tr class="clickable-row @(task.TaskStatus=="Completed" ? " completed-task" : "")" @onclick="() =>ToggleSliderPanel(task)">
                        @* //render radio button for each task in the task list table and bind the radio button to the TaskId property of the TaskModel class *@
                        <td>
                            <input type="radio" name="@(task.TaskId.ToString())" @bind="task.TaskId" @onclick="() => CompleteTask(task)" @onclick:stopPropagation />
                        </td>
                        <td>@task.TaskName</td>
                        <td>@task.TaskDescription</td>
                        <td>@task.TaskStatus</td>
                        <td>@task.TaskPriority</td>
                        <td>@task.TaskDueDate</td>
                        <td>
                            <button class="oi oi-trash" @onclick="() => DeleteTask(task.TaskId)" @onclick:stopPropagation></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@*Display list of completed tasks in the task list table below the list of tasks *@
@if (completedTasks.Count > 0)
{
    <div class="row">
        <div class="col-md-12">
            <h3>Completed Tasks</h3>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th></th>
                        <th>Task Name</th>
                        <th>Task Description</th>
                        <th>Task Status</th>
                        <th>Task Priority</th>
                        <th>Task Due Date</th>
                        <th>Task Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in completedTasks)
                    {
                        <tr class="clickable-row @(task.TaskStatus=="Completed" ? " completed-task" : "")" @onclick="() =>ToggleSliderPanel(task)">
                            <td>
                                <input type="radio" name="@(task.TaskId.ToString())" @bind="task.TaskId" @onclick="() => CompleteTask(task)" @onclick:stopPropagation />
                            </td>
                            <td>@task.TaskName</td>
                            <td>@task.TaskDescription</td>
                            <td>@task.TaskStatus</td>
                            <td>@task.TaskPriority</td>
                            <td>@task.TaskDueDate</td>
                            <td>
                                <button class="oi oi-trash" @onclick="() => DeleteTask(task.TaskId)" @onclick:stopPropagation></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@*//render an slider panel to view and edit the task details in the task list
//the below slider panel should move in from the right side of the screen and cover 25% of the screen with fade-in effect *@
@if (IsSliderPanelVisible)
{
    <div class="slider-panel-container @(IsSliderPanelVisible ? "visible " : "" ) row">
        <div class="slider-panel @(IsSliderPanelVisible ? "slide-in" : "slide-out") col-md-12">
            <div class="card">
                <div class="card-header">
                    Task Details
                    <button class="close-button" @onclick="CloseSliderPanel">X</button>
                </div>
                <div class="card-body">
                    <div class="row slider-panel-row">
                        <div class="col-md-12">
                            <label>Task Name:</label>
                            <input type="text" class="form-control" @bind="selectedTask.TaskName" />
                        </div>
                    </div>
                    <div class="row slider-panel-row">
                        <div class="col-md-12">
                            <label>Task Description:</label>
                            <input type="text" class="form-control" @bind="selectedTask.TaskDescription" />
                        </div>
                    </div>
                    <div class="row slider-panel-row">
                        <div class="col-md-12">
                            <label>Task Status</label>
                            <select class="form-control" @bind="selectedTask.TaskStatus">
                                <option value="Started">Not Started</option>
                                <option value="Started">Started</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                    </div>
                    <div class="row slider-panel-row">
                        <div class="col-md-12">
                            <label>Task Priority:</label>
                            <select class="form-control" @bind="selectedTask.TaskPriority">
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                        </div>
                    </div>
                    <div class="row slider-panel-row">
                        <div class="col-md-12">
                            <label>Task Due Date:</label>
                            <input type="date" class="form-control" @bind="selectedTask.TaskDueDate" />
                        </div>
                    </div>
                    
                </div>
            </div>
        </div>
    </div>
}


@inject IJSRuntime JSRuntime

@*//write code to do CRUD operations on the tasks in memory *@
@code {
    List<TaskModel> tasks = new List<TaskModel>();
    List<TaskModel> completedTasks = new List<TaskModel>();
    private int? currentTaskId = 0;
    private string? currentTaskName;
    private bool IsSliderPanelVisible { get; set; }
    private TaskModel selectedTask = new TaskModel();
    private bool validationFlag = false;
    private async Task DeleteTask(int taskId)
    {
        var task = tasks.FirstOrDefault(t => t.TaskId == taskId);
        if (task != null)
        {
            // Show a confirmation dialog
            bool confirmation = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Do you want to delete task" + task.TaskId });
            if (confirmation)
            {
                tasks.Remove(task);
            }
        }
    }

    private void ToggleSliderPanel(TaskModel task)
    {
        IsSliderPanelVisible = !IsSliderPanelVisible;
        Console.WriteLine("Slider Panel Visibility: " + IsSliderPanelVisible);
        selectedTask = task;
    }

    private void CreateNewTask()
    {


        var buildTask = new TaskModel
            {
                TaskId = tasks.Count + 1,
                TaskName = currentTaskName,
                TaskDescription = "-",
                TaskStatus = "Not Started",
                TaskPriority = "Low",
                TaskDueDate = DateTime.Now.AddDays(1)
            };
            @*//add task to the list of tasks*@
    if (!ValidateTaskInput(buildTask))
    {   
        tasks.Add(buildTask);
    }
}

    @*//Define the TaskModel class*@
    public class TaskModel
    {
    public int TaskId { get; set; }
    public string TaskName { get; set; }
    public string TaskDescription { get; set; }
    public string TaskStatus { get; set; }
    public string TaskPriority { get; set; }
    public DateTime TaskDueDate { get; set; }
    }

    @*//create a method to load the tasks*@
    protected override void OnInitialized()
    {
        @*//create a new task*@
        TaskModel task1 = new TaskModel
        {
            TaskId = 1,
            TaskName = "Task 1",
            TaskDescription = "Task 1 Description",
            TaskStatus = "Not Started",
            TaskPriority = "Low",
            TaskDueDate = DateTime.Now.AddDays(1)
        };


        tasks.Add(task1);

        TaskModel task2 = new TaskModel
        {
            TaskId = 2,
            TaskName = "Task 2",
            TaskDescription = "Task 2 Description",
            TaskStatus = "In Progress",
            TaskPriority = "Medium",
            TaskDueDate = DateTime.Now.AddDays(2)
        };

        tasks.Add(task2);

        TaskModel task3 = new TaskModel
        {
            TaskId = 3,
            TaskName = "Task 3",
            TaskDescription = "Task 3 Description",
            TaskStatus = "Not Started",
            TaskPriority = "High",
            TaskDueDate = DateTime.Now.AddDays(3)
        };

        tasks.Add(task3);
    }
    @*//write input validations on all properties of TaskModel in single function*@
    private bool ValidateTaskInput(TaskModel task)
    {
        //trigger validation if task name is null or empty string
        return validationFlag = string.IsNullOrEmpty(task.TaskName);
    }


    private void SaveTask()
    {
        var task = tasks.FirstOrDefault(t => t.TaskId == selectedTask.TaskId);
        task.TaskName = selectedTask.TaskName;
        IsSliderPanelVisible = true;
    }
    private void CloseSliderPanel()
    {
        IsSliderPanelVisible = false;
    }

    private void CompleteTask(TaskModel task)
    {
        if(task.TaskStatus =="Completed") {
            task.TaskStatus = "Not Started";
            completedTasks.Remove(task);
            tasks.Add(task);
        }
        else {
            task.TaskStatus = "Completed";
            tasks.Remove(task);
            completedTasks.Add(task);
        }
    }

}


